---
title: "Code Challenge 2"
author: "Alier Reng"
format: html
editor: visual
---

## CODE CHALLENGE - PART 2

This tutorial will teach you how to solve the same problem in R and Python.
This is a mini-code by Arkadi.

## Importing Libraries

```{python}
import pandas as pd
import numpy as np

```

```{python}
# Import raw data
raw = pd.read_csv('../00_data/data_breaks.csv')

# Inspect the first 5 rows
raw.head()
```

## Transforming the data

```{python}
#| code-overflow: wrap
# Clean and transform the data

df = (raw
      .assign(
        Period = lambda raw: pd.to_datetime(raw['Period']).dt.strftime('%Y-%m-%d'),
        Return = lambda raw_: raw_['Return'].str.rstrip('%').astype(float) / 100,
        value = lambda raw_: np.where(raw_['Return'].isna() & ~ raw_['Return'].shift(1).isna(), 1, 0),
        Group_id = lambda raw_: np.cumsum(raw_['value']) + 1
      )
      .drop(columns = ['value'])
      .dropna()
      .reset_index(drop=True)

)


# Inspect the first 5 rows
df
```

Confirm the number of observations (rows) and variables (columns)

```{python}
print(f'This dataset has {df.shape[0]} rows and {df.shape[1]} columns.')

```

## Converting our `Python` code into a function

```{python}
# Define a function
def compute_group_ids(df):
  """
  Objective: Compute group breaks and convert them into group ids.

  args: pandas DataFrame to be transformed.
  Return: DataFrame
  """
  return (df
          .assign(
            Period = lambda df: pd.to_datetime(df['Period']).dt.strftime('%Y-%m-%d'),
            Return = lambda df_: df_['Return'].str.rstrip('%').astype(float) / 100,
            value = lambda df_: np.where(df_['Return'].isna() & \
            ~ df_['Return'].shift(1).isna(), 1, 0),
            group_id = lambda df_: np.cumsum(df_['value']) + 1
           )
           .drop(columns = ['value'])
           .dropna()
           .reset_index(drop=True)
           .rename(columns=lambda col: col.lower())
           )

# Testing our new function
aa = compute_group_ids(raw)

# Inspect the first 5 rows
aa.head()
```

```{r}
#| warning: false
#| message: false

# Libraries
library(tidyverse)

# compute unique ID's using cumsum
data_raw <- read_csv('00_data/data_breaks.csv', show_col_types = FALSE)
 
# Subsetting the data 
results_tbl <- 
  
  data_raw %>%
  
  mutate(
    Period     = mdy(Period),
    Return     = as.numeric(Return %>% str_remove_all("%")) / 100,
    BreakGroup = if_else(is.na(Return) & !is.na(lag(Return)), 1, 0), 
    BreakGroup = cumsum(BreakGroup) + 1
  ) %>% 
  drop_na(Return)
  
# Inspect the first 10 rows
slice_head(results_tbl, n = 10)
```

## Converting our `R` code into a function

```{r}
# Defining a function: we assume that the data variables will be constant; otherwise, we should not hard code them in our function.
compute_clusters <- function(data, .date) {
  
  data %>% 
    mutate(
      Period     = mdy({{ .date }}),
      Return     = as.numeric(Return %>% str_remove_all("%")) / 100,
      BreakGroup = if_else(is.na(Return) & !is.na(lag(Return)), 1, 0),
      BreakGroup = cumsum(BreakGroup) + 1
    ) %>% 
    
    # Remove rows with nas
    drop_na(Return)
    
}

# Testing our new function
# ========================
aa <- compute_clusters(data_raw, .date = Period)
aa
```

```{python}
for i in range(8):
  if i % 2 == 1:
    print(f'The value of {i=}')
  else:
    print(f'The value of {i**2 = } & {i = }.')
```

```{}
```
